module Array

# returns true if all elements in the array match the predicate, otherwise returns false
fn all?(array, predicate) {
    cond {
        len(array) == 0 => true
        true => Array.reduce_while(array, true \_ x => {
            if predicate(x) {
                (:cont true)
            } else {
                (:halt false)
            }
        })
    }
}

# returns true if any element in the array matches the predicate, otherwise returns false
fn any?(array, predicate) {
    cond {
        len(array) == 0 => false
        true => Array.reduce_while(array, false \_ x => {
            if predicate(x) {
                (:halt true)
            } else {
                (:cont false)
            }
        })
    }
}

# returns the all the elements of two arrays combined in a new array
fn concat(array1 array2) {
    Array.reduce(array2, array1, \acc x => push(acc, x))
}

# returns whether the array contains the given element
fn contains?(array, element) {
    Array.reduce_while(array, false \_ x => {
        if x == element {
            (:halt true)
        } else {
            (:cont false)
        }
    })
}

# returns true if an array is empty
fn empty?(array) {
    len(array) == 0
}

# returns a new array, with all elements that return true for the given function
fn filter(array f) {
    Array.reduce(array, [], \acc x => {
        if f(x) {
            push(acc, x)
        } else {
            acc
        }
    })
}

# returns the first element of the array that returns true for the given function
fn find(array f) {
    Array.reduce_while(array, :nil \_ x => {
        if f(x) {
            (:halt x)
        } else {
            (:cont :nil)
        }
    })
}

# returns the index of the first element that returns true for the given function
fn find_index(array f) {
    let indexed = Array.with_index(array)
    Array.find(indexed, \x => {
        let (_, elem) = x
        f(elem)
    })
    |> \x => {
        case x {
            :nil => :nil
            (index, _) => index
        }
    }

}


# Returns the first element of the array.
let _head = head
fn head(array) {
    _head(array)
}

# Run the function on each element of the array
# fn iter(array, f) {
#     if len(array) > 0 {
#         f(head(array))
#         iter(tail(array), f)
#     }
# }

# Joins all elements of the array into a string.

fn join(array, separator) {
    Array.reduce(array, \acc x => acc + separator + x)
}

# Returns the number of elements in the array.
fn length(array) {
    len(array)
}

# Applies a function to each element of the array and returns the resulting array.
fn map(array, f) {
    Array.reduce(array, [], \acc x => push(acc, f(x)))
}

# recursively sorts the array
fn quicksort(array) {
    if len(array) <= 1 {
        array
    } else {
        let pivot = head(array)
        let less = filter(tail(array), \x => x < pivot )
        let greater = filter(tail(array), \x => x >= pivot )
        concat(quicksort(less), concat([pivot], quicksort(greater)))
    }
}

# recursively sorts the arry, by applying the given function to the elements
fn quicksort_by(array, f) {
    if len(array) <= 1 {
        array
    } else {
        let pivot = head(array)
        let less = filter(tail(array), \x => f(x) < f(pivot) )
        let greater = filter(tail(array), \x => f(x) >= f(pivot) )
        concat(quicksortBy(less, f), concat([pivot], quicksortBy(greater, f)))
    }
}

# Updates the element at the given index with the given value
fn replace_at(array, index, value) {
    Array.reduce(array, (0, []), \acc x => {
        let (i, result) = acc
        if i == index {
            (i + 1, push(result, value))
        } else {
            (i + 1, push(result, x))
        }
    })
    |> \x => x @ 1
}

# Sums all items in the array
fn sum(array) {
    reduce(array, 0, \acc x => acc + x)
}

# Returns a new array containing the elements of the original array, except for the first element.
let _tail = tail
fn tail(array) {
    _tail(array)
}

# Attempts to find the first element in the array that satisfies the given function, returing (:some, element) if found, or :none if not
fn try_find(array f) {
    cond {
        len(array) == 0 => :none
        true => Array.reduce_while(array, :none \_ x => {
            if f(x) {
                (:halt :some x)
            } else {
                (:cont :none)
            }
        })
    }
}

# returns a tuple of all elements in the array paired with their index
fn with_index(array) {
    Array.reduce(array, (0, []), \acc elem => {
        let (index, result) = acc
        (index + 1, push(result, (index, elem)))
    })
    |> \x => x @ 1
}

# Returns a new array with elements of both arrays combined in tuples
fn zip(array1 array2) {
    let len1 = len(array1)
    let len2 = len(array2)
    let min_len = if len1 < len2 { len1 } else { len2 }
    Array.reduce_while(array1, (0, []), \acc x => {
        let (index, result) = acc
        if index < min_len {
            let i = index + 1
            let new = push(result, (x, array2 @ index))
            (:cont (i, new))
        } else {
            (:halt acc)
        }
    })
    |> \x => x @ 1
}

# Returns a new array with elements of both arrays combined in tuples, applying the given function to each pair
fn zip_with(array1 array2 f) {
    let len1 = len(array1)
    let len2 = len(array2)
    let min_len = if len1 < len2 { len1 } else { len2 }
    Array.reduce_while(array1, (0, []), \acc x => {
        let (index, result) = acc
        if index < min_len {
            let i = index + 1
            let new = push(result, f(x, array2 @ index))
            (:cont (i, new))
        } else {
            (:halt acc)
        }
    })
    |> \x => x @ 1
}

